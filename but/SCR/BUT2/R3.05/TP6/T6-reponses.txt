TP 6:

exercice 1 :

1) On recopie le programme qui était dans le TP et on observe ce qu'il se passe

On fait ensuite :
gcc -o ex1-1.out ex1-1.c
./ex1-1.out

On obtent :

Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16
Hello from thread 16

2) Chaque thread est sensé avoir un numéro différent cependant c'est la meme variable pour tous ces numéros ce qui donne 16 on ne sait pas quel est l'ordre d'execution car les programmes sont en parallèles.

3)Après avoir créer le fichier et l'executable
gcc -o ex1-3.out ex1-3.c
./ex1-3.out

On définit des variables différentes en parametres en créant un tableau de int
On obtient :

Hello from thread 0
Hello from thread 1
Hello from thread 3
Hello from thread 2
Hello from thread 7
Hello from thread 4
Hello from thread 8
Hello from thread 5
Hello from thread 9
Hello from thread 6
Hello from thread 10
Hello from thread 11
Hello from thread 13
Hello from thread 14
Hello from thread 12
Hello from thread 15

Exercice 2 :

On doit faire des duels entre différent nombre pour savoir qui est le meilleur.
Pour ce la on crée différents tableaux qui représentent le tour de jeu, ensuite on compare les éléments deux à deux et on les insère dans le tableau suivant

gcc -o ex2.out ex2.c
./ex2.out 10 20 30 5 26 8 78 95 

On obtient :

Le vainqueur du duel n 1  n1=30 et n2=5 est : n1=30
Le vainqueur du duel n 3 n1=78 et n2=95 est : n2=95
Le vainqueur du duel n 0 n1=10 et n2=20 est : n2=20
Le vainqueur du duel n 2  n1=26 et n2=8 est : n1=26
Le vainqueur du duel n 4 n1=20 et n2=30 est : n2=30
Le vainqueur du duel n 5 n1=26 et n2=95 est : n2=95
Le vainqueur du duel n 6 n1=30 et n2=95 est : n2=95

Exercice 3 :

On a définit une structure qui nous a permit de récupérer des valeurs dans la fonction sum, puis on a renvoyé le résultat par cette structure.

Avec les executions:
gcc -o ex3.out ex3.c
./ex3.out 1000000000 1 :
Le résultat est : 500000000500000000
Le temps écoulé est : 1.62468 secondes 

./ex3.out 1000000000 2 :
Le résultat est : 500000000500000000
Le temps écoulé est : 0.820366 secondes 

./ex3.out 1000000000 3 :
Le résultat est : 500000000500000000
Le temps écoulé est : 0.555542 secondes 

./ex3.out 1000000000 4
Le résultat est : 500000000500000000
Le temps écoulé est : 0.417906 secondes

./ex3.out 1000000000 20 :
Le résultat est : 500000000500000000
Le temps écoulé est : 0.207796 secondes 


Meme si le gain de temps devient de moins en moins significatif

exercice 4 :

1)On créer les différentes fonctions et on vérifie les cas d'erreurs possibles avec des assertions.
On compile.
gcc -o ex4-1.out ex4-1.c
./ex4-1.out

Cela fonctionne avec une utilisation monothreadé

2)On transforme notre code en utilisation multithreadé