// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package datawarehouse.job1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendStringUtil;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: JOB1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.0.1.20171115_1047-M1
 * @status 
 */
public class JOB1 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "JOB1";
	private final String projectName = "DATAWAREHOUSE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					JOB1.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(JOB1.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tOracleOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DATAWAREHOUSE_JOB1 = new byte[0];
		static byte[] commonByteArray_DATAWAREHOUSE_JOB1 = new byte[0];

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public String LOC;

		public String getLOC() {
			return this.LOC;
		}

		public String director;

		public String getDirector() {
			return this.director;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATAWAREHOUSE_JOB1.length) {
					if (length < 1024
							&& commonByteArray_DATAWAREHOUSE_JOB1.length == 0) {
						commonByteArray_DATAWAREHOUSE_JOB1 = new byte[1024];
					} else {
						commonByteArray_DATAWAREHOUSE_JOB1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATAWAREHOUSE_JOB1, 0, length);
				strReturn = new String(commonByteArray_DATAWAREHOUSE_JOB1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATAWAREHOUSE_JOB1) {

				try {

					int length = 0;

					this.Department = readString(dis);

					this.LOC = readString(dis);

					this.director = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.LOC, dos);

				// String

				writeString(this.director, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Department=" + Department);
			sb.append(",LOC=" + LOC);
			sb.append(",director=" + director);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tOracleOutput_1 begin ] start
				 */

				ok_Hash.put("tOracleOutput_1", false);
				start_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				currentComponent = "tOracleOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tOracleOutput_1 = 0;

				class BytesLimit65535_tOracleOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tOracleOutput_1().limitLog4jByte();

				int nb_line_tOracleOutput_1 = 0;
				int nb_line_update_tOracleOutput_1 = 0;
				int nb_line_inserted_tOracleOutput_1 = 0;
				int nb_line_deleted_tOracleOutput_1 = 0;
				int nb_line_rejected_tOracleOutput_1 = 0;

				int tmp_batchUpdateCount_tOracleOutput_1 = 0;

				int deletedCount_tOracleOutput_1 = 0;
				int updatedCount_tOracleOutput_1 = 0;
				int insertedCount_tOracleOutput_1 = 0;
				int rejectedCount_tOracleOutput_1 = 0;

				boolean whetherReject_tOracleOutput_1 = false;

				java.sql.Connection conn_tOracleOutput_1 = null;

				// optional table
				String dbschema_tOracleOutput_1 = null;
				String tableName_tOracleOutput_1 = null;
				String driverClass_tOracleOutput_1 = "oracle.jdbc.driver.OracleDriver";

				java.lang.Class.forName(driverClass_tOracleOutput_1);
				String url_tOracleOutput_1 = null;
				url_tOracleOutput_1 = "jdbc:oracle:thin:@" + "lorien.arda.lan"
						+ ":" + "1521" + ":" + "orcliut";
				String dbUser_tOracleOutput_1 = "fouche";

				final String decryptedPassword_tOracleOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("16fd34981465a643823fbfaafc9c8265");

				String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
				dbschema_tOracleOutput_1 = "";

				conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(
						url_tOracleOutput_1, dbUser_tOracleOutput_1,
						dbPwd_tOracleOutput_1);
				resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
				conn_tOracleOutput_1.setAutoCommit(false);
				int commitEvery_tOracleOutput_1 = 10000;
				int commitCounter_tOracleOutput_1 = 0;
				int batchSize_tOracleOutput_1 = 10000;
				int batchSizeCounter_tOracleOutput_1 = 0;
				int count_tOracleOutput_1 = 0;

				if (dbschema_tOracleOutput_1 == null
						|| dbschema_tOracleOutput_1.trim().length() == 0) {
					tableName_tOracleOutput_1 = ("DEPARTEMENT");
				} else {
					tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "."
							+ ("DEPARTEMENT");
				}
				String tableNameForSearch_tOracleOutput_1 = ""
						+ ((String) "DEPARTEMENT") + "";
				String dbschemaForSearch_tOracleOutput_1 = null;
				if (dbschema_tOracleOutput_1 == null
						|| dbschema_tOracleOutput_1.trim().length() == 0) {
					dbschemaForSearch_tOracleOutput_1 = ((String) "fouche")
							.toUpperCase();
				} else {
					dbschemaForSearch_tOracleOutput_1 = dbschema_tOracleOutput_1
							.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tOracleOutput_1 = conn_tOracleOutput_1
						.getMetaData();
				if (tableNameForSearch_tOracleOutput_1.indexOf("\"") == -1) {
					tableNameForSearch_tOracleOutput_1 = tableNameForSearch_tOracleOutput_1
							.toUpperCase();
				} else {
					tableNameForSearch_tOracleOutput_1 = tableNameForSearch_tOracleOutput_1
							.replaceAll("\"", "");
				}
				java.sql.ResultSet rsTable_tOracleOutput_1 = dbMetaData_tOracleOutput_1
						.getTables(null, dbschemaForSearch_tOracleOutput_1,
								tableNameForSearch_tOracleOutput_1,
								new String[] { "TABLE" });
				boolean whetherExist_tOracleOutput_1 = false;
				if (rsTable_tOracleOutput_1.next()) {
					whetherExist_tOracleOutput_1 = true;
				}
				rsTable_tOracleOutput_1.close();

				if (whetherExist_tOracleOutput_1) {
					java.sql.Statement stmtDrop_tOracleOutput_1 = conn_tOracleOutput_1
							.createStatement();
					stmtDrop_tOracleOutput_1.execute("DROP TABLE "
							+ tableName_tOracleOutput_1 + "");
					stmtDrop_tOracleOutput_1.close();
				}
				java.sql.Statement stmtCreate_tOracleOutput_1 = conn_tOracleOutput_1
						.createStatement();
				stmtCreate_tOracleOutput_1
						.execute("CREATE TABLE "
								+ tableName_tOracleOutput_1
								+ "(Department VARCHAR2(14)  ,LOC VARCHAR2(9)  ,director VARCHAR2(7)  )");
				stmtCreate_tOracleOutput_1.close();
				String insert_tOracleOutput_1 = "INSERT INTO "
						+ tableName_tOracleOutput_1
						+ " (Department,LOC,director) VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1
						.prepareStatement(insert_tOracleOutput_1);

				/**
				 * [tOracleOutput_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				"/export/home/an21/fouche/BD/BUT2/S4/TP05/department.csv"/**
				 * End
				 * field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.Department = null;

								row1.LOC = null;

								row1.director = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Department = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Department = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LOC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LOC = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.director = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.director = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tOracleOutput_1 main ] start
							 */

							currentComponent = "tOracleOutput_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							whetherReject_tOracleOutput_1 = false;
							if (row1.Department == null) {
								pstmt_tOracleOutput_1.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_1.setString(1,
										row1.Department);
							}

							if (row1.LOC == null) {
								pstmt_tOracleOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_1.setString(2, row1.LOC);
							}

							if (row1.director == null) {
								pstmt_tOracleOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_1.setString(3,
										row1.director);
							}

							pstmt_tOracleOutput_1.addBatch();
							nb_line_tOracleOutput_1++;
							batchSizeCounter_tOracleOutput_1++;
							if (batchSize_tOracleOutput_1 > 0
									&& batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
								try {
									pstmt_tOracleOutput_1.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {
									java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1
											.getNextException(), sqle_tOracleOutput_1 = null;
									String errormessage_tOracleOutput_1;
									if (ne_tOracleOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tOracleOutput_1 = new java.sql.SQLException(
												e_tOracleOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tOracleOutput_1
																.getMessage(),
												ne_tOracleOutput_1
														.getSQLState(),
												ne_tOracleOutput_1
														.getErrorCode(),
												ne_tOracleOutput_1);
										errormessage_tOracleOutput_1 = sqle_tOracleOutput_1
												.getMessage();
									} else {
										errormessage_tOracleOutput_1 = e_tOracleOutput_1
												.getMessage();
									}

									System.err
											.println(errormessage_tOracleOutput_1);

								}
								tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
										.getUpdateCount();
								insertedCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
										: 0);
								batchSizeCounter_tOracleOutput_1 = 0;
							}
							commitCounter_tOracleOutput_1++;
							if (commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {

								try {
									pstmt_tOracleOutput_1.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {
									java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1
											.getNextException(), sqle_tOracleOutput_1 = null;
									String errormessage_tOracleOutput_1;
									if (ne_tOracleOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tOracleOutput_1 = new java.sql.SQLException(
												e_tOracleOutput_1.getMessage()
														+ "\ncaused by: "
														+ ne_tOracleOutput_1
																.getMessage(),
												ne_tOracleOutput_1
														.getSQLState(),
												ne_tOracleOutput_1
														.getErrorCode(),
												ne_tOracleOutput_1);
										errormessage_tOracleOutput_1 = sqle_tOracleOutput_1
												.getMessage();
									} else {
										errormessage_tOracleOutput_1 = e_tOracleOutput_1
												.getMessage();
									}

									System.err
											.println(errormessage_tOracleOutput_1);

								}
								tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
										.getUpdateCount();
								insertedCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
										: 0);
								conn_tOracleOutput_1.commit();
								commitCounter_tOracleOutput_1 = 0;
							}

							tos_count_tOracleOutput_1++;

							/**
							 * [tOracleOutput_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tOracleOutput_1 end ] start
				 */

				currentComponent = "tOracleOutput_1";

				try {
					if (pstmt_tOracleOutput_1 != null) {

						pstmt_tOracleOutput_1.executeBatch();

					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_1) {
					java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1
							.getNextException(), sqle_tOracleOutput_1 = null;
					String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(
								e_tOracleOutput_1.getMessage()
										+ "\ncaused by: "
										+ ne_tOracleOutput_1.getMessage(),
								ne_tOracleOutput_1.getSQLState(),
								ne_tOracleOutput_1.getErrorCode(),
								ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1
								.getMessage();
					} else {
						errormessage_tOracleOutput_1 = e_tOracleOutput_1
								.getMessage();
					}

					System.err.println(errormessage_tOracleOutput_1);

				}
				if (pstmt_tOracleOutput_1 != null) {
					tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1
							.getUpdateCount();

					insertedCount_tOracleOutput_1

					+= (tmp_batchUpdateCount_tOracleOutput_1 != -1 ? tmp_batchUpdateCount_tOracleOutput_1
							: 0);
				}
				if (pstmt_tOracleOutput_1 != null) {

					pstmt_tOracleOutput_1.close();

				}
				if (commitCounter_tOracleOutput_1 > 0) {

					conn_tOracleOutput_1.commit();

				}

				conn_tOracleOutput_1.close();

				resourceMap.put("finish_tOracleOutput_1", true);

				nb_line_deleted_tOracleOutput_1 = nb_line_deleted_tOracleOutput_1
						+ deletedCount_tOracleOutput_1;
				nb_line_update_tOracleOutput_1 = nb_line_update_tOracleOutput_1
						+ updatedCount_tOracleOutput_1;
				nb_line_inserted_tOracleOutput_1 = nb_line_inserted_tOracleOutput_1
						+ insertedCount_tOracleOutput_1;
				nb_line_rejected_tOracleOutput_1 = nb_line_rejected_tOracleOutput_1
						+ rejectedCount_tOracleOutput_1;

				globalMap.put("tOracleOutput_1_NB_LINE",
						nb_line_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_1);
				globalMap.put("tOracleOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tOracleOutput_1", true);
				end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				/**
				 * [tOracleOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tOracleOutput_1 finally ] start
				 */

				currentComponent = "tOracleOutput_1";

				if (resourceMap.get("finish_tOracleOutput_1") == null) {
					if (resourceMap.get("conn_tOracleOutput_1") != null) {
						try {

							java.sql.Connection ctn_tOracleOutput_1 = (java.sql.Connection) resourceMap
									.get("conn_tOracleOutput_1");

							ctn_tOracleOutput_1.close();

						} catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
							String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :"
									+ sqlEx_tOracleOutput_1.getMessage();

							System.err.println(errorMessage_tOracleOutput_1);
						}
					}
				}

				/**
				 * [tOracleOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DATAWAREHOUSE_JOB1 = new byte[0];
		static byte[] commonByteArray_DATAWAREHOUSE_JOB1 = new byte[0];

		public String First_Name;

		public String getFirst_Name() {
			return this.First_Name;
		}

		public String Last_Name;

		public String getLast_Name() {
			return this.Last_Name;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public Integer Years_Of_Experience;

		public Integer getYears_Of_Experience() {
			return this.Years_Of_Experience;
		}

		public Float Salary;

		public Float getSalary() {
			return this.Salary;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATAWAREHOUSE_JOB1.length) {
					if (length < 1024
							&& commonByteArray_DATAWAREHOUSE_JOB1.length == 0) {
						commonByteArray_DATAWAREHOUSE_JOB1 = new byte[1024];
					} else {
						commonByteArray_DATAWAREHOUSE_JOB1 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATAWAREHOUSE_JOB1, 0, length);
				strReturn = new String(commonByteArray_DATAWAREHOUSE_JOB1, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATAWAREHOUSE_JOB1) {

				try {

					int length = 0;

					this.First_Name = readString(dis);

					this.Last_Name = readString(dis);

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Gender = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Years_Of_Experience = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.First_Name, dos);

				// String

				writeString(this.Last_Name, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// Integer

				writeInteger(this.Years_Of_Experience, dos);

				// Float

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Salary);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("First_Name=" + First_Name);
			sb.append(",Last_Name=" + Last_Name);
			sb.append(",Email=" + Email);
			sb.append(",Phone=" + Phone);
			sb.append(",Gender=" + Gender);
			sb.append(",Department=" + Department);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Years_Of_Experience="
					+ String.valueOf(Years_Of_Experience));
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tOracleOutput_2 begin ] start
				 */

				ok_Hash.put("tOracleOutput_2", false);
				start_Hash.put("tOracleOutput_2", System.currentTimeMillis());

				currentComponent = "tOracleOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tOracleOutput_2 = 0;

				class BytesLimit65535_tOracleOutput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tOracleOutput_2().limitLog4jByte();

				int nb_line_tOracleOutput_2 = 0;
				int nb_line_update_tOracleOutput_2 = 0;
				int nb_line_inserted_tOracleOutput_2 = 0;
				int nb_line_deleted_tOracleOutput_2 = 0;
				int nb_line_rejected_tOracleOutput_2 = 0;

				int tmp_batchUpdateCount_tOracleOutput_2 = 0;

				int deletedCount_tOracleOutput_2 = 0;
				int updatedCount_tOracleOutput_2 = 0;
				int insertedCount_tOracleOutput_2 = 0;
				int rejectedCount_tOracleOutput_2 = 0;

				boolean whetherReject_tOracleOutput_2 = false;

				java.sql.Connection conn_tOracleOutput_2 = null;

				// optional table
				String dbschema_tOracleOutput_2 = null;
				String tableName_tOracleOutput_2 = null;
				String driverClass_tOracleOutput_2 = "oracle.jdbc.driver.OracleDriver";

				java.lang.Class.forName(driverClass_tOracleOutput_2);
				String url_tOracleOutput_2 = null;
				url_tOracleOutput_2 = "jdbc:oracle:thin:@" + "lorien.arda.lan"
						+ ":" + "1521" + ":" + "orcliut";
				String dbUser_tOracleOutput_2 = "fouche";

				final String decryptedPassword_tOracleOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("16fd34981465a643823fbfaafc9c8265");

				String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
				dbschema_tOracleOutput_2 = "";

				conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(
						url_tOracleOutput_2, dbUser_tOracleOutput_2,
						dbPwd_tOracleOutput_2);
				resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
				conn_tOracleOutput_2.setAutoCommit(false);
				int commitEvery_tOracleOutput_2 = 10000;
				int commitCounter_tOracleOutput_2 = 0;
				int batchSize_tOracleOutput_2 = 10000;
				int batchSizeCounter_tOracleOutput_2 = 0;
				int count_tOracleOutput_2 = 0;

				if (dbschema_tOracleOutput_2 == null
						|| dbschema_tOracleOutput_2.trim().length() == 0) {
					tableName_tOracleOutput_2 = ("EMPLOYEE");
				} else {
					tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "."
							+ ("EMPLOYEE");
				}
				String tableNameForSearch_tOracleOutput_2 = ""
						+ ((String) "EMPLOYEE") + "";
				String dbschemaForSearch_tOracleOutput_2 = null;
				if (dbschema_tOracleOutput_2 == null
						|| dbschema_tOracleOutput_2.trim().length() == 0) {
					dbschemaForSearch_tOracleOutput_2 = ((String) "fouche")
							.toUpperCase();
				} else {
					dbschemaForSearch_tOracleOutput_2 = dbschema_tOracleOutput_2
							.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tOracleOutput_2 = conn_tOracleOutput_2
						.getMetaData();
				if (tableNameForSearch_tOracleOutput_2.indexOf("\"") == -1) {
					tableNameForSearch_tOracleOutput_2 = tableNameForSearch_tOracleOutput_2
							.toUpperCase();
				} else {
					tableNameForSearch_tOracleOutput_2 = tableNameForSearch_tOracleOutput_2
							.replaceAll("\"", "");
				}
				java.sql.ResultSet rsTable_tOracleOutput_2 = dbMetaData_tOracleOutput_2
						.getTables(null, dbschemaForSearch_tOracleOutput_2,
								tableNameForSearch_tOracleOutput_2,
								new String[] { "TABLE" });
				boolean whetherExist_tOracleOutput_2 = false;
				if (rsTable_tOracleOutput_2.next()) {
					whetherExist_tOracleOutput_2 = true;
				}
				rsTable_tOracleOutput_2.close();

				if (whetherExist_tOracleOutput_2) {
					java.sql.Statement stmtDrop_tOracleOutput_2 = conn_tOracleOutput_2
							.createStatement();
					stmtDrop_tOracleOutput_2.execute("DROP TABLE "
							+ tableName_tOracleOutput_2 + "");
					stmtDrop_tOracleOutput_2.close();
				}
				java.sql.Statement stmtCreate_tOracleOutput_2 = conn_tOracleOutput_2
						.createStatement();
				stmtCreate_tOracleOutput_2
						.execute("CREATE TABLE "
								+ tableName_tOracleOutput_2
								+ "(First_Name VARCHAR2(20)  ,Last_Name VARCHAR2(10)  ,Email VARCHAR2(50)  ,Phone VARCHAR2(22)  ,Gender VARCHAR2(6)  ,Department VARCHAR2(14)  ,Job_Title VARCHAR2(25)  ,Years_Of_Experience INT ,Salary FLOAT )");
				stmtCreate_tOracleOutput_2.close();
				String insert_tOracleOutput_2 = "INSERT INTO "
						+ tableName_tOracleOutput_2
						+ " (First_Name,Last_Name,Email,Phone,Gender,Department,Job_Title,Years_Of_Experience,Salary) VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2
						.prepareStatement(insert_tOracleOutput_2);

				/**
				 * [tOracleOutput_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class BytesLimit65535_tFileInputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				"/export/home/an21/fouche/BD/BUT2/S4/TP05/employees.csv"/**
				 * End
				 * field tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_2.readNext()) {

								totalLinetFileInputDelimited_2++;

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.First_Name = null;

								row2.Last_Name = null;

								row2.Email = null;

								row2.Phone = null;

								row2.Gender = null;

								row2.Department = null;

								row2.Job_Title = null;

								row2.Years_Of_Experience = null;

								row2.Salary = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.First_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.First_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Last_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Last_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Email = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Email = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Phone = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Phone = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Gender = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Gender = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Department = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Department = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Job_Title = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Job_Title = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {
										try {

											row2.Years_Of_Experience = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2
													.setException(new RuntimeException(
															String.format(
																	"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																	"Years_Of_Experience",
																	"row2",
																	rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																	ex_tFileInputDelimited_2),
															ex_tFileInputDelimited_2));
										}
									} else {

										row2.Years_Of_Experience = null;

									}

								} else {

									row2.Years_Of_Experience = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {
										try {

											row2.Salary = ParserUtils
													.parseTo_Float(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2
													.setException(new RuntimeException(
															String.format(
																	"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																	"Salary",
																	"row2",
																	rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																	ex_tFileInputDelimited_2),
															ex_tFileInputDelimited_2));
										}
									} else {

										row2.Salary = null;

									}

								} else {

									row2.Salary = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tOracleOutput_2 main ] start
							 */

							currentComponent = "tOracleOutput_2";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							whetherReject_tOracleOutput_2 = false;
							if (row2.First_Name == null) {
								pstmt_tOracleOutput_2.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(1,
										row2.First_Name);
							}

							if (row2.Last_Name == null) {
								pstmt_tOracleOutput_2.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(2,
										row2.Last_Name);
							}

							if (row2.Email == null) {
								pstmt_tOracleOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(3, row2.Email);
							}

							if (row2.Phone == null) {
								pstmt_tOracleOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(4, row2.Phone);
							}

							if (row2.Gender == null) {
								pstmt_tOracleOutput_2.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(5, row2.Gender);
							}

							if (row2.Department == null) {
								pstmt_tOracleOutput_2.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(6,
										row2.Department);
							}

							if (row2.Job_Title == null) {
								pstmt_tOracleOutput_2.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tOracleOutput_2.setString(7,
										row2.Job_Title);
							}

							if (row2.Years_Of_Experience == null) {
								pstmt_tOracleOutput_2.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tOracleOutput_2.setInt(8,
										row2.Years_Of_Experience);
							}

							if (row2.Salary == null) {
								pstmt_tOracleOutput_2.setNull(9,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tOracleOutput_2.setFloat(9, row2.Salary);
							}

							pstmt_tOracleOutput_2.addBatch();
							nb_line_tOracleOutput_2++;
							batchSizeCounter_tOracleOutput_2++;
							if (batchSize_tOracleOutput_2 > 0
									&& batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
								try {
									pstmt_tOracleOutput_2.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_2) {
									java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2
											.getNextException(), sqle_tOracleOutput_2 = null;
									String errormessage_tOracleOutput_2;
									if (ne_tOracleOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tOracleOutput_2 = new java.sql.SQLException(
												e_tOracleOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tOracleOutput_2
																.getMessage(),
												ne_tOracleOutput_2
														.getSQLState(),
												ne_tOracleOutput_2
														.getErrorCode(),
												ne_tOracleOutput_2);
										errormessage_tOracleOutput_2 = sqle_tOracleOutput_2
												.getMessage();
									} else {
										errormessage_tOracleOutput_2 = e_tOracleOutput_2
												.getMessage();
									}

									System.err
											.println(errormessage_tOracleOutput_2);

								}
								tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2
										.getUpdateCount();
								insertedCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2 != -1 ? tmp_batchUpdateCount_tOracleOutput_2
										: 0);
								batchSizeCounter_tOracleOutput_2 = 0;
							}
							commitCounter_tOracleOutput_2++;
							if (commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {

								try {
									pstmt_tOracleOutput_2.executeBatch();
								} catch (java.sql.BatchUpdateException e_tOracleOutput_2) {
									java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2
											.getNextException(), sqle_tOracleOutput_2 = null;
									String errormessage_tOracleOutput_2;
									if (ne_tOracleOutput_2 != null) {
										// build new exception to provide the
										// original cause
										sqle_tOracleOutput_2 = new java.sql.SQLException(
												e_tOracleOutput_2.getMessage()
														+ "\ncaused by: "
														+ ne_tOracleOutput_2
																.getMessage(),
												ne_tOracleOutput_2
														.getSQLState(),
												ne_tOracleOutput_2
														.getErrorCode(),
												ne_tOracleOutput_2);
										errormessage_tOracleOutput_2 = sqle_tOracleOutput_2
												.getMessage();
									} else {
										errormessage_tOracleOutput_2 = e_tOracleOutput_2
												.getMessage();
									}

									System.err
											.println(errormessage_tOracleOutput_2);

								}
								tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2
										.getUpdateCount();
								insertedCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2 != -1 ? tmp_batchUpdateCount_tOracleOutput_2
										: 0);
								conn_tOracleOutput_2.commit();
								commitCounter_tOracleOutput_2 = 0;
							}

							tos_count_tOracleOutput_2++;

							/**
							 * [tOracleOutput_2 main ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tOracleOutput_2 end ] start
				 */

				currentComponent = "tOracleOutput_2";

				try {
					if (pstmt_tOracleOutput_2 != null) {

						pstmt_tOracleOutput_2.executeBatch();

					}
				} catch (java.sql.BatchUpdateException e_tOracleOutput_2) {
					java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2
							.getNextException(), sqle_tOracleOutput_2 = null;
					String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(
								e_tOracleOutput_2.getMessage()
										+ "\ncaused by: "
										+ ne_tOracleOutput_2.getMessage(),
								ne_tOracleOutput_2.getSQLState(),
								ne_tOracleOutput_2.getErrorCode(),
								ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2
								.getMessage();
					} else {
						errormessage_tOracleOutput_2 = e_tOracleOutput_2
								.getMessage();
					}

					System.err.println(errormessage_tOracleOutput_2);

				}
				if (pstmt_tOracleOutput_2 != null) {
					tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2
							.getUpdateCount();

					insertedCount_tOracleOutput_2

					+= (tmp_batchUpdateCount_tOracleOutput_2 != -1 ? tmp_batchUpdateCount_tOracleOutput_2
							: 0);
				}
				if (pstmt_tOracleOutput_2 != null) {

					pstmt_tOracleOutput_2.close();

				}
				if (commitCounter_tOracleOutput_2 > 0) {

					conn_tOracleOutput_2.commit();

				}

				conn_tOracleOutput_2.close();

				resourceMap.put("finish_tOracleOutput_2", true);

				nb_line_deleted_tOracleOutput_2 = nb_line_deleted_tOracleOutput_2
						+ deletedCount_tOracleOutput_2;
				nb_line_update_tOracleOutput_2 = nb_line_update_tOracleOutput_2
						+ updatedCount_tOracleOutput_2;
				nb_line_inserted_tOracleOutput_2 = nb_line_inserted_tOracleOutput_2
						+ insertedCount_tOracleOutput_2;
				nb_line_rejected_tOracleOutput_2 = nb_line_rejected_tOracleOutput_2
						+ rejectedCount_tOracleOutput_2;

				globalMap.put("tOracleOutput_2_NB_LINE",
						nb_line_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",
						nb_line_update_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tOracleOutput_2);
				globalMap.put("tOracleOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tOracleOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tOracleOutput_2", true);
				end_Hash.put("tOracleOutput_2", System.currentTimeMillis());

				/**
				 * [tOracleOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tOracleOutput_2 finally ] start
				 */

				currentComponent = "tOracleOutput_2";

				if (resourceMap.get("finish_tOracleOutput_2") == null) {
					if (resourceMap.get("conn_tOracleOutput_2") != null) {
						try {

							java.sql.Connection ctn_tOracleOutput_2 = (java.sql.Connection) resourceMap
									.get("conn_tOracleOutput_2");

							ctn_tOracleOutput_2.close();

						} catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
							String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :"
									+ sqlEx_tOracleOutput_2.getMessage();

							System.err.println(errorMessage_tOracleOutput_2);
						}
					}
				}

				/**
				 * [tOracleOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final JOB1 JOB1Class = new JOB1();

		int exitCode = JOB1Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = JOB1.class.getClassLoader()
					.getResourceAsStream(
							"datawarehouse/job1_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : JOB1");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final char[][] escapeChars = { { 'n', '\n' }, { 'r', '\r' },
			{ 'f', '\f' }, { 'b', '\b' }, { 't', '\t' }, { '\"', '\"' },
			{ '\\', '\\' }, { '\'', '\'' } };

	private String replaceEscapeChars(String contentToReplace) {

		if (contentToReplace == null || ("").equals(contentToReplace.trim())) {
			return contentToReplace;
		}

		char[] contextChars = contentToReplace.toCharArray();
		StringBuilder result = new StringBuilder();
		int length = contentToReplace.length();
		boolean flag = false;

		for (int i = 0; i < length; i++) {

			if (contextChars[i] == '\\') {
				for (char[] escapeChar : escapeChars) {
					if (i + 1 < length && contextChars[i + 1] == escapeChar[0]) {
						result.append(escapeChar[1]);
						i++;
						flag = true;
						break;
					}
				}

			}
			if (!flag) {
				result.append(contextChars[i]);
			}
			flag = false;

		}
		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 85018 characters generated by Talend Open Studio for ESB on the 10 mars 2023
 * 11:07:06 CET
 ************************************************************************************************/
